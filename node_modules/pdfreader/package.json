{
  "name": "pdfreader",
  "version": "0.1.4",
  "description": "Utility for simplifying the development of scripted / rule-based parsing of PDF files, including tabular data (tables, with automatic column detection).",
  "main": "index.js",
  "scripts": {
    "test": "node test/test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/adrienjoly/npm-pdfreader"
  },
  "keywords": [
    "pdf",
    "parsing",
    "convert",
    "conversion",
    "file",
    "CLI",
    "tables",
    "data",
    "csv",
    "json",
    "rules"
  ],
  "author": {
    "name": "Adrien Joly"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/adrienjoly/npm-pdfreader/issues"
  },
  "homepage": "https://github.com/adrienjoly/npm-pdfreader",
  "dependencies": {
    "pdf2json": "^0.7.1"
  },
  "readme": "# pdfreader\nNPM module for simplifying the development of scripted / rule-based parsing of PDF files, including tabular data (tables, with automatic column detection).\n\n## Installation, tests and CLI usage\n\n    npm install pdfreader\n    cd node_modules/pdfreader\n    npm test\n    node parse.js test/sample.pdf\n\n## Raw PDF reading\n\nThe PdfReader class reads a PDF file, and calls a function on each item found while parsing that file.\n\n An item object can match one of the following objects:\n\n - `null`, when the parsing is over, or an error occured.\n - `{file:{path:string}}`, when a PDF file is being opened.\n - `{page:integer}`, when a new page is being parsed, provides the page number, starting at 1.\n - `{text:string, x:float, y:float, w:float, h:float...}`, represents each text with its position.\n\nExample:\n\n```javascript\nnew PdfReader().parseFileItems(\"sample.pdf\", function(err, item){\n  if (err)\n    callback(err);\n  else if (!item)\n    callback();\n  else if (item.text)\n    console.log(item.text);\n});\n```\n\n## Rule-based data extraction\n\nThe Rule class can be used to define and process data extraction rules, while parsing a PDF document.\n\nRule instances expose \"accumulators\": methods that defines the data extraction strategy to be used for each rule.\n\nExample:\n\n```javascript\nvar processItem = Rule.makeItemProcessor([\n  Rule.on(/^Hello \\\"(.*)\\\"$/).extractRegexpValues().then(displayValue),\n  Rule.on(/^Value\\:/).parseNextItemValue().then(displayValue),\n  Rule.on(/^c1$/).parseTable(3).then(displayTable),\n  Rule.on(/^Values\\:/).accumulateAfterHeading().then(displayValue),\n]);\nnew PdfReader().parseFileItems(\"sample.pdf\", function(err, item){\n  processItem(item);\n});\n```\n",
  "readmeFilename": "README.md",
  "_id": "pdfreader@0.1.4",
  "dist": {
    "shasum": "ff81955d5ab26353975c8512ee7d5d0cc8c8afe6"
  },
  "_from": "pdfreader@",
  "_resolved": "https://registry.npmjs.org/pdfreader/-/pdfreader-0.1.4.tgz"
}
